/*
 * Doomsd-API
 *
 * This is service is designed to return current information and historical data related to the Doomsday Clock maintained by the Bulletin of Atomic Scientists. There is a lightweight front end application designed to emmulate the motif of the clock as described here - https://www.theatlantic.com/entertainment/archive/2015/11/doomsday-clock-michael-bierut-design/412936/
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nate01776@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StatusModel : IEquatable<StatusModel>
    { 
        /// <summary>
        /// Internal reference for a clock status.
        /// </summary>
        /// <value>Internal reference for a clock status.</value>
        [Required]
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Date a TTM change was released
        /// </summary>
        /// <value>Date a TTM change was released</value>
        [Required]
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Time to midnight
        /// </summary>
        /// <value>Time to midnight</value>
        [Required]
        [DataMember(Name="timeToMidnight")]
        public string TimeToMidnight { get; set; }

        /// <summary>
        /// Short message including the clocks TTM,
        /// </summary>
        /// <value>Short message including the clocks TTM,</value>
        [Required]
        [DataMember(Name="shortMessage")]
        public string ShortMessage { get; set; }

        /// <summary>
        /// URL reference to the Bulletin of Atomic Scientist&#x27;s post regarding this status.
        /// </summary>
        /// <value>URL reference to the Bulletin of Atomic Scientist&#x27;s post regarding this status.</value>
        [DataMember(Name="ref")]
        public string Ref { get; set; }

        /// <summary>
        /// Descriptive message about the TTM status.
        /// </summary>
        /// <value>Descriptive message about the TTM status.</value>
        [Required]
        [DataMember(Name="longMessage")]
        public string LongMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TimeToMidnight: ").Append(TimeToMidnight).Append("\n");
            sb.Append("  ShortMessage: ").Append(ShortMessage).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  LongMessage: ").Append(LongMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StatusModel)obj);
        }

        /// <summary>
        /// Returns true if StatusModel instances are equal
        /// </summary>
        /// <param name="other">Instance of StatusModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    TimeToMidnight == other.TimeToMidnight ||
                    TimeToMidnight != null &&
                    TimeToMidnight.Equals(other.TimeToMidnight)
                ) && 
                (
                    ShortMessage == other.ShortMessage ||
                    ShortMessage != null &&
                    ShortMessage.Equals(other.ShortMessage)
                ) && 
                (
                    Ref == other.Ref ||
                    Ref != null &&
                    Ref.Equals(other.Ref)
                ) && 
                (
                    LongMessage == other.LongMessage ||
                    LongMessage != null &&
                    LongMessage.Equals(other.LongMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (TimeToMidnight != null)
                    hashCode = hashCode * 59 + TimeToMidnight.GetHashCode();
                    if (ShortMessage != null)
                    hashCode = hashCode * 59 + ShortMessage.GetHashCode();
                    if (Ref != null)
                    hashCode = hashCode * 59 + Ref.GetHashCode();
                    if (LongMessage != null)
                    hashCode = hashCode * 59 + LongMessage.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StatusModel left, StatusModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StatusModel left, StatusModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
